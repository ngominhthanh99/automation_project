{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 133\nCurrent browser version is 138.0.7204.169 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF6A6B26F15+28773]\n\t(No symbol) [0x00007FF6A6A92600]\n\t(No symbol) [0x00007FF6A6928FAA]\n\t(No symbol) [0x00007FF6A696CE2B]\n\t(No symbol) [0x00007FF6A696BE6B]\n\t(No symbol) [0x00007FF6A6965FB8]\n\t(No symbol) [0x00007FF6A69615A6]\n\t(No symbol) [0x00007FF6A69B547B]\n\t(No symbol) [0x00007FF6A69B4A50]\n\t(No symbol) [0x00007FF6A69A7023]\n\t(No symbol) [0x00007FF6A696FF5E]\n\t(No symbol) [0x00007FF6A69711E3]\n\tGetHandleVerifier [0x00007FF6A6E7425D+3490733]\n\tGetHandleVerifier [0x00007FF6A6E8BA43+3586963]\n\tGetHandleVerifier [0x00007FF6A6E8147D+3544525]\n\tGetHandleVerifier [0x00007FF6A6BEC9DA+838442]\n\t(No symbol) [0x00007FF6A6A9D04F]\n\t(No symbol) [0x00007FF6A6A99614]\n\t(No symbol) [0x00007FF6A6A997B6]\n\t(No symbol) [0x00007FF6A6A88CE9]\n\tBaseThreadInitThunk [0x00007FFDC89B7374+20]\n\tRtlUserThreadStart [0x00007FFDC9C5CC91+33]", "trace": "self = <tests.test_login.TestLogin object at 0x000002B49AD49A90>, request = <SubRequest 'setup' for <Function test_login>>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup(self, request):\n        options = Options()\n        options.add_argument(\"--headless=new\")\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n        options.add_argument(\"--disable-gpu\")\n        options.add_argument(\"--window-size=1920,1080\")\n        options.add_argument(\"--disable-blink-features=AutomationControlled\")\n        options.add_argument(\"--remote-debugging-port=9222\")\n    \n>       driver = webdriver.Chrome(options=options)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nbase\\base_test.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\dorem\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Users\\dorem\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nC:\\Users\\dorem\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\nC:\\Users\\dorem\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\dorem\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B49AD4ABA0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF6A6A88CE9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDC89B7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDC9C5CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 133\nE       Current browser version is 138.0.7204.169 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6A6B26F15+28773]\nE       \t(No symbol) [0x00007FF6A6A92600]\nE       \t(No symbol) [0x00007FF6A6928FAA]\nE       \t(No symbol) [0x00007FF6A696CE2B]\nE       \t(No symbol) [0x00007FF6A696BE6B]\nE       \t(No symbol) [0x00007FF6A6965FB8]\nE       \t(No symbol) [0x00007FF6A69615A6]\nE       \t(No symbol) [0x00007FF6A69B547B]\nE       \t(No symbol) [0x00007FF6A69B4A50]\nE       \t(No symbol) [0x00007FF6A69A7023]\nE       \t(No symbol) [0x00007FF6A696FF5E]\nE       \t(No symbol) [0x00007FF6A69711E3]\nE       \tGetHandleVerifier [0x00007FF6A6E7425D+3490733]\nE       \tGetHandleVerifier [0x00007FF6A6E8BA43+3586963]\nE       \tGetHandleVerifier [0x00007FF6A6E8147D+3544525]\nE       \tGetHandleVerifier [0x00007FF6A6BEC9DA+838442]\nE       \t(No symbol) [0x00007FF6A6A9D04F]\nE       \t(No symbol) [0x00007FF6A6A99614]\nE       \t(No symbol) [0x00007FF6A6A997B6]\nE       \t(No symbol) [0x00007FF6A6A88CE9]\nE       \tBaseThreadInitThunk [0x00007FFDC89B7374+20]\nE       \tRtlUserThreadStart [0x00007FFDC9C5CC91+33]\n\nC:\\Users\\dorem\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "description": "Verify user can login with valid credentials", "attachments": [{"name": "log", "source": "f9dedff7-2dc3-49c8-a336-410407869a28-attachment.txt", "type": "text/plain"}], "start": 1753528041834, "stop": 1753528041834, "uuid": "3ff3f182-475c-4d10-bba2-844e031d3b71", "historyId": "2116f0ad00ab1de0effc54f114dd9496", "testCaseId": "2116f0ad00ab1de0effc54f114dd9496", "fullName": "tests.test_login.TestLogin#test_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "suite", "value": "Login Tests"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "Kev"}, {"name": "thread", "value": "8160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}], "titlePath": ["tests", "test_login.py", "TestLogin"]}